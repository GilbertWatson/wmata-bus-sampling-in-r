
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #####install packages to read data#####
> if("sampling" %in% rownames(installed.packages()) == FALSE) {install.packages("sampling")}
> require(sampling)
Loading required package: sampling
Loading required package: MASS
Loading required package: lpSolve
> 
> ######source population builders and api access#####
> LoadAPIToolsAndPopulationData <- function() {
+   source("~/wmata-bus-sampling-in-r/PopulationBuilder.r")
+ }
> 
> ######define sampling frame on the bus route dimension#####
> getSamplingFrameNow <- function() {
+   RouteSamplingFrame <- busroutes$RouteID[which(busroutes$Has.Downtown.Stops.On.Route == T & busroutes$RouteID %in% unique(NumberOfActiveTripsByRouteIdAndTime$RouteID[which(NumberOfActiveTripsByRouteIdAndTime$Buses.On.Route > 0)]))]
+   time <- as.POSIXlt(Sys.time())
+   time$sec <- 00
+   RouteSamplingFrameNow <- RouteSamplingFrame[which(RouteSamplingFrame %in% NumberOfActiveTripsByRouteIdAndTime$RouteID[which(NumberOfActiveTripsByRouteIdAndTime$Time == time & NumberOfActiveTripsByRouteIdAndTime$Buses.On.Route != 0)])]
+   return(RouteSamplingFrameNow)
+ }
> 
> #####function that randomly selects from the sampling frame, all units are sampled over the course of one minute#####
> GetDataForSampleOfBusesNow <- function(SampleSize,SamplingFrame) {
+   if (SampleSize > 20) {
+     stop("Sample Size Will Break API limits")
+   }
+   else {
+     BusesToSample <- sample(x=SamplingFrame,size=SampleSize,replace=F)
+     BusSampleData <- NULL
+     for (n in BusesToSample) {
+       BusSampleData <- rbind(BusSampleData,getbuspositiondata(n))
+       Sys.sleep(60/SampleSize)
+     }
+     BusSampleData$SystemTime <- as.POSIXlt(Sys.time())
+     BusSampleData$little_n.Route <- SampleSize
+     BusSampleData$big_N.Route <- length(SamplingFrame)
+     return(BusSampleData)
+   }
+ }
> 
> proc.time()
   user  system elapsed 
  0.236   0.044   0.535 
